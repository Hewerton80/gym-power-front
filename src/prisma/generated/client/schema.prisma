// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    output   = "./generated/client"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

enum Gender {
    M
    F
    O
}

enum ExerciseStatus {
    READY_TO_START
    IN_PROGRESS
    FINISHED
}

model User {
    id               String            @id @default(cuid())
    email            String            @unique
    name             String
    password         String?
    isActive         Boolean           @default(true)
    isAdmin          Boolean
    isTeacher        Boolean
    trainingPlans    TrainingPlan[]
    dateOfBirth      DateTime
    gender           Gender
    heightInMt       Float?
    weightInKg       Float?
    studentExercises StudentExercise[]
    avatarBgColor    String
    createdAt        DateTime          @default(now())
}

model Muscle {
    id        String     @id @default(cuid())
    name      String
    isActive  Boolean?   @default(true)
    exercises Exercise[]
    createdAt DateTime   @default(now())
}

model Exercise {
    id                      String                    @id @default(cuid())
    name                    String
    muscleId                String
    description             String?                   @db.VarChar(1000)
    image                   String?
    isActive                Boolean                   @default(true)
    muscle                  Muscle                    @relation(fields: [muscleId], references: [id])
    studentExercises        StudentExercise[]
    trainingExerciseHistory TrainingExerciseHistory[]
    trainingExercises       TrainingExercise[]
    createdAt               DateTime                  @default(now())
}

// model UserTraingPlan {
//     id           String       @id @default(cuid())
//     userId       String
//     trainingPlan TrainingPlan @relation(fields: [trainingPlanId], references: [id])
//     trainingPlanId String
//     createdAt    DateTime     @default(now())
//     authorId  String
//     studentId String
//     teacher   User       @relation(fields: [authorId], references: [id])
//     student   User       @relation(fields: [studentId], references: [id])
// }

model TrainingPlan {
    id           String     @id @default(cuid())
    name         String
    isActive     Boolean?   @default(true)
    objective    String?    @db.VarChar(1000)
    teacherId    String
    teacherName  String
    teacherEmail String
    studentId    String
    student      User       @relation(fields: [studentId], references: [id])
    // user  User    @relation(fields: [authorId, studantId], references: [id])
    trainings    Training[]
    createdAt    DateTime   @default(now())
}

model Training {
    id                 String             @id @default(cuid())
    name               String
    order              Int                @default(0)
    trainingPlanId     String
    isInProgress       Boolean?           @default(false)
    isRecommendedToDay Boolean?           @default(false)
    isActive           Boolean?           @default(true)
    createdAt          DateTime           @default(now())
    trainingPlan       TrainingPlan       @relation(fields: [trainingPlanId], references: [id])
    trainingHistory    TrainingHistory[]
    trainingExercises  TrainingExercise[]
}

model TrainingExercise {
    id                      String                    @id @default(cuid())
    treiningId              String
    exerciseId              String
    intervalInSeconds       Int?
    status                  ExerciseStatus            @default(READY_TO_START)
    order                   Int                       @default(0)
    isActive                Boolean?                  @default(true)
    createdAt               DateTime                  @default(now())
    training                Training                  @relation(fields: [treiningId], references: [id])
    exercise                Exercise                  @relation(fields: [exerciseId], references: [id])
    trainingExerciseHistory TrainingExerciseHistory[]
}

model StudentExercise {
    id         String   @id @default(cuid())
    exerciseId String
    weightInKg Float
    createdAt  DateTime @default(now())
    student    User     @relation(fields: [id], references: [id])
    exercise   Exercise @relation(fields: [exerciseId], references: [id])
}

model TrainingHistory {
    id         String    @id @default(cuid())
    startDate  DateTime? @default(now())
    endDate    DateTime?
    training   Training? @relation(fields: [trainingId], references: [id])
    trainingId String?
}

model TrainingExerciseHistory {
    id                 String           @id @default(cuid())
    trainingExerciseId String
    startDate          DateTime?        @default(now())
    endDate            DateTime?
    trainingExercise   TrainingExercise @relation(fields: [trainingExerciseId], references: [id])
    Exercise           Exercise?        @relation(fields: [exerciseId], references: [id])
    exerciseId         String?
}
